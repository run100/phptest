#!/usr/bin/python
#coding:utf-8

import os,re,sys,time;


def main():
    l1 = run('/usr/local/bin/git diff --cached --name-only HEAD').splitlines();
    if (len(l1) == 0):
        exit(0);

    print '***************************************************';
    print '*                                                 *';
    print '*               万家社区代码提交检查              *';
    print '*                                                 *';
    print '***************************************************';


    l2 = run('/usr/local/bin/git diff --name-only').splitlines();

    l3 = list(set(l1).intersection(set(l2)));
    if (len(l3) > 0):
        print "\n";
        print "以下文件在git add后又有修改, 请重新add到暂存区后再提交";
        print "\n".join(l3);
        print "\n";
        exit(1);

    ret = parse_diff(l1);

    ban_check(ret);
    syntax_check(ret);

    l2 = run('/usr/local/bin/git diff --name-only').splitlines();
    l3 = list(set(l1).intersection(set(l2)));
    if (len(l3) > 0):
        print "\n";
        print "以下文件在git add后又有修改, 请重新add到暂存区后再提交";
        print "\n".join(l3);
        print "\n";
        exit(1);

    print '检查通过!'

    return 0;

def run(cmd):
    p = os.popen(cmd);
    text = p.read();
    p.close();
    return text.strip();

def parse_diff(files):
    ret = {};
    if (len(files) == 0):
        return ret;
    files.sort();
    ret['php_files'] = filter(filter_php ,files);
    ret['xml_files'] = filter(filter_xml ,files);
    ret['yml_files'] = filter(filter_yml ,files);
    ret['ban_files'] = filter(filter_ban ,files);
    ret['html_files'] = filter(filter_html, files);
    ret['js_files'] = filter(filter_js, files);
    ret['css_files'] = filter(filter_css, files);
    return ret;

def is_super():
    users = ['Gu Xiaoyu'];
    user_name = run('/usr/local/bin/git config --get user.name');
    return user_name in users;

def filter_css(file):
    return re.search(r'^(src|app)/.+[.]css$', file) and not re.search(r'^(src|app)/.+[.]min[.]css$', file) and not re.search(r'/(libs|vendor)/', file);

def filter_js(file):
    return re.search(r'^(src|app)/.+[.]js$', file) and not re.search(r'^(src|app)/.+[.]min[.]js$', file) and not re.search(r'/(libs|vendor)/', file);

def filter_html(file):
    return re.search(r'^(src|app)/.+[.](html|twig|htm)$', file);

def filter_php(file):
    return re.search(r'^(src|app)/.+php$', file);

def filter_yml(file):
    return re.search(r'^(src|app)/.+yml$', file);

def filter_xml(file):
    return re.search(r'^(src|app)/.+xml$', file);

def filter_ban(file):
    return re.search(r'(^vendor/)', file);


def query_yes_no(question, default="yes"):
    valid = {"yes":"yes", "y":"yes", "ye":"yes", "no":"no", "n":"no"}
    if default == None:
        prompt = " [y/n] "
    elif default == "yes":
        prompt = " [Y/n] "
    elif default == "no":
        prompt = " [y/N] "
    else:
        raise ValueError("invalid default answer: '%s'" % default)

    f = open('/dev/tty');
    while 1:
        sys.stdout.write(question + prompt)
        choice = f.readline().strip().lower()
        if default is not None and choice == '':
            f.close();
            return default
        elif choice in valid.keys():
            f.close();
            return valid[choice]
        else:
            sys.stdout.write("Please respond with 'yes' or 'no' "\
                             "(or 'y' or 'n').\n")

def syntax_check(lists):
    ret = lists;
    i = 0;
    while i < len(ret['php_files']):
        file = ret['php_files'][i];
        i = i+1;
        if not os.path.isfile(file): continue;
        p = os.popen("/usr/local/bin/git show :'%s'|php -l 2>&1"%file);
        err = p.read();
        if (p.close() != None):
            print "\n警告: PHP语法错误!不允许提交!";
            print file;
            print "\n";
            print err;
            exit(1);

    if len(ret['css_files']) > 0:
        run("sed -i '1 s/^\xef\xbb\xbf//' %s"%(' '.join(ret['css_files'])));
        run("/usr/local/bin/git add %s"%(' '.join(ret['css_files'])));

    if len(ret['js_files']) > 0:
        run("sed -i '1 s/^\xef\xbb\xbf//' %s"%(' '.join(ret['js_files'])));
        #run("fixjsstyle  %s"%(' '.join(ret['js_files'])));
        #run("fixjsstyle  %s"%(' '.join(ret['js_files'])));
        #run("fixjsstyle  %s"%(' '.join(ret['js_files'])));
        run("/usr/local/bin/git add %s"%(' '.join(ret['js_files'])));

    err = run("gjslint --nojsdoc %s | grep -E 'FILE|Line'"%(' '.join(ret['js_files'])));
    if len(err) > 0:
        print "\n警告: JS文档经自动修正后仍不符合规范，请根据提示修改后提交!";
        print err;
        exit(1);

    flist = ret['js_files'] + ret['html_files'];
    i = 0;
    while i < len(flist):
        file = flist[i];
        i = i+1;
        if not os.path.isfile(file): continue;
        err = os.popen("/usr/local/bin/git grep -En '\<(alert|console)\>\s*[;\(]' :'%s'"%file).read();
        if (len(err)):
            print "\n";
            print file;
            print "\n";
            print err;
            print "\n警告: PHP代码中可能含有调试性代码!请检查后提交!";
            ok = query_yes_no("确认以上代码中不含调试性代码?", None);
            if (ok == 'no'):
                exit(1); 


    i = 0;
    while i < len(ret['php_files']):
        file = ret['php_files'][i];
        i = i+1;
        if not os.path.isfile(file): continue;
        if not os.path.getsize(file): continue;
        err = os.popen("/usr/local/bin/git grep -En '\<(endif|endforeach|endswitch)\>' :'%s'"%file).read();
        if (len(err)): continue;
        err = run("/usr/local/bin/git show :'{0}'|/usr/bin/phpcs --standard=/home/git-hooks/365lin-rules.xml|sed 's/FILE: STDIN/FILE: {1}/'".format(file, file.replace('/', '\/')));
        if (len(err)):
            print "\n警告: 编码不符合规范, 请参照提示修改后提交!";
            print err;
            print "\n";
            exit(1);


    i = 0;
    while i < len(ret['php_files']):
        file = ret['php_files'][i];
        i = i+1;
        if not os.path.isfile(file): continue;
        err = os.popen("/usr/local/bin/git grep -En '[$]\<_(FILES|POST|GET|SESSION|COOKIE|SERVER)\>' :'%s'"%file).read();
        if (len(err)):
            print "\n警告: 请使用Request类中的包装方法!";
            print file;
            print "\n";
            print err;
            exit(1);



    i = 0;
    while i < len(ret['php_files']):
        file = ret['php_files'][i];
        i = i+1;
        if not os.path.isfile(file): continue;
        err = os.popen("/usr/local/bin/git grep -En '\<(die|debug_backtrace|debug_print_backtrace)\>\s*[;\(]' :'%s'"%file).read();
        if (len(err)):
            print "\n警告: PHP代码中含有调试性代码!不允许提交!";
            print file;
            print "\n";
            print err;
            exit(1);

    i = 0;
    while i < len(ret['php_files']):
        file = ret['php_files'][i];
        i = i+1;
        if not os.path.isfile(file): continue;
        err = os.popen("/usr/local/bin/git grep -En '\<(echo|print|print_r|var_dump|exit)\>\s*[;\(]' :'%s'"%file).read();
        if (len(err)):
            print "\n";
            print file;
            print "\n";
            print err;
            print "\n警告: PHP代码中可能含有调试性代码!请检查后提交!";
            ok = query_yes_no("确认以上代码中不含调试性代码?", None);
            if (ok == 'no'):
                exit(1);

    

    i = 0;
    while i < len(ret['xml_files']):
        file = ret['xml_files'][i];
        i = i+1;
        if not os.path.isfile(file): continue;
        p = os.popen("/usr/local/bin/git show :'%s'|xmllint --noout - 2>&1"%file);
        err = p.read();
        if (p.close() != None):
            print "\n警告: XML配置文件语法错误!不允许提交!";
            print file;
            print "\n";
            print err;
            exit(1);

    i = 0;
    while i < len(ret['yml_files']):
        file = ret['yml_files'][i];
        i = i+1;
        if not os.path.isfile(file): continue;
        p = os.popen("/usr/local/bin/git show :'{0}'|yamllint - 2>&1".format(file));
        err = p.read();
        if (p.close() != None):
            print "\n警告: YML配置文件语法错误!不允许提交!";
            print file;
            print "\n";
            print err;
            exit(1);


def ban_check(lists):
    ret = lists;

    if (is_super()):
        return;

    if (len (ret['ban_files']) == 0):
        return;
    print "\n警告: 以下代码不允许修改，如需修改请联系各自技术经理。";
    print "\n";
    print "\n".join(ret['ban_files']);
    print "\n";
    exit(1);

main();
